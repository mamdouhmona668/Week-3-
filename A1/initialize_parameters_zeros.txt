# GRADED FUNCTION: initialize_parameters_zeros 

def initialize_parameters_zeros(layers_dims):
    """
    Arguments:
    layer_dims -- python array (list) containing the size of each layer.
    
    Returns:
    parameters -- python dictionary containing your parameters "W1", "b1", ..., "WL", "bL":
                    W1 -- weight matrix of shape (layers_dims[1], layers_dims[0])
                    b1 -- bias vector of shape (layers_dims[1], 1)
                    ...
                    WL -- weight matrix of shape (layers_dims[L], layers_dims[L-1])
                    bL -- bias vector of shape (layers_dims[L], 1)
    """
    
    parameters = {}
    L = len(layers_dims)            # number of layers in the network
    #print(layers_dims)
    for l in range(1, L):
        ### START CODE HERE ### (? 2 lines of code)
        row=layers_dims[l]
        col=layers_dims[l-1]
        parameters['W' + str(l)] = np.zeros((row,col))
        parameters['b' + str(l)] = np.zeros((row,1))
        ### END CODE HERE ###
    return parameters